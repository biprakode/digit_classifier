{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5196,"sourceType":"datasetVersion","datasetId":3147}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-24T12:55:53.995653Z","iopub.execute_input":"2025-09-24T12:55:53.995935Z","iopub.status.idle":"2025-09-24T12:55:54.020840Z","shell.execute_reply.started":"2025-09-24T12:55:53.995915Z","shell.execute_reply":"2025-09-24T12:55:54.019933Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/mnist-digit-recognizer/train.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"## Basic EDA","metadata":{}},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/mnist-digit-recognizer/train.csv\")\ndata.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T12:55:55.757356Z","iopub.execute_input":"2025-09-24T12:55:55.757637Z","iopub.status.idle":"2025-09-24T12:55:59.650598Z","shell.execute_reply.started":"2025-09-24T12:55:55.757615Z","shell.execute_reply":"2025-09-24T12:55:59.649658Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(42000, 785)"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"import seaborn as sns\n\n# plotting distribution of images\nsns.countplot(x=\"label\" , data = data , palette='viridis')\nplt.title(\"Distribution of Digits in MNIST\")\nplt.xlabel(\"Digit Label\")\nplt.ylabel(\"Count\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T12:55:59.652052Z","iopub.execute_input":"2025-09-24T12:55:59.652346Z","iopub.status.idle":"2025-09-24T12:56:01.131560Z","shell.execute_reply.started":"2025-09-24T12:55:59.652322Z","shell.execute_reply":"2025-09-24T12:56:01.130375Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/3277223542.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# plotting distribution of images\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcountplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"label\"\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'viridis'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Distribution of Digits in MNIST\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Digit Label\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Count\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"],"ename":"NameError","evalue":"name 'plt' is not defined","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"### imagifying data for CNN models","metadata":{}},{"cell_type":"code","source":"from PIL import Image\nimport matplotlib.pyplot as plt\nimport random\nimages = {}\n\ndef imagify_row(row):\n    label = row['label']\n    row = row.drop(['label'])\n    img = Image.fromarray(row.values.reshape(28,28).astype(np.uint8))\n    images.setdefault(label, []).append(img)\n    \n#imagifying rows\ndata.apply(imagify_row , axis = 1)\n\n#picking random image\nlabel = random.choice(list(images.keys()))\nim = random.choice(images[label])\nplt.imshow(im , cmap = \"gray\")\nplt.title(f\"Label: {label}\")\nplt.axis(\"off\")\nplt.show()\n\n#storing images under subfolders\nos.makedirs('images' , exist_ok = True)\nfor label in images.keys():\n    os.makedirs(f\"images/{label}\" , exist_ok = True)\n    for idx, img in enumerate(images[label]):\n        img.save(f\"images/{label}/{label}_{idx}.png\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T12:56:01.132254Z","iopub.status.idle":"2025-09-24T12:56:01.132571Z","shell.execute_reply.started":"2025-09-24T12:56:01.132434Z","shell.execute_reply":"2025-09-24T12:56:01.132446Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Multinomial Logistic Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX = data.drop('label' , axis=1).values / 255.0\ny = data['label'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T13:02:32.996008Z","iopub.execute_input":"2025-09-24T13:02:32.996519Z","iopub.status.idle":"2025-09-24T13:02:33.692499Z","shell.execute_reply.started":"2025-09-24T13:02:32.996483Z","shell.execute_reply":"2025-09-24T13:02:33.691496Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"class My_LR:\n    def __init__(self , lr=0.01 , n_iters=10000):\n        self.lr = lr\n        self.n_iters = n_iters\n\n    def softmax(self , z):\n        exp_z = np.exp(z - np.max(z , axis = 1 , keepdims = True))\n        return exp_z / np.sum(exp_z , axis = 1 , keepdims = True)\n\n    def fit(self , X , y):\n        n_samples , n_features = X.shape\n        n_classes = len(np.unique(y))\n\n        self.W = np.zeros((n_features , n_classes))\n        self.b = np.zeros((1 , n_classes))\n\n        #OHE y\n        y_ohe = np.eye(n_classes)[y].squeeze()\n\n        #meat\n        for _ in range(self.n_iters):\n            linear = np.dot(X, self.W) + self.b\n            y_pred = self.softmax(linear)\n\n            dW = (1 / n_samples) * np.dot(X.T, (y_pred - y_ohe))\n            db = (1 / n_samples) * np.sum(y_pred - y_ohe, axis=0, keepdims=True)\n\n            self.W -= self.lr * dW\n            self.b -= self.lr * db\n\n    def predict(self , X):\n        linear = np.dot(X, self.W) + self.b\n        y_pred = self.softmax(linear)\n        return np.argmax(y_pred , axis = 1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T08:50:55.434750Z","iopub.execute_input":"2025-09-24T08:50:55.435011Z","iopub.status.idle":"2025-09-24T08:50:55.446955Z","shell.execute_reply.started":"2025-09-24T08:50:55.434990Z","shell.execute_reply":"2025-09-24T08:50:55.446160Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nmodel = LogisticRegression(max_iter=2000, multi_class=\"multinomial\" , solver='sag')\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\nprint(\"Accuracy: (API)\", accuracy_score(y_test, preds))\n\n## Turn of my model\nLR = My_LR(0.1 , 2000)\nLR.fit(X_train , y_train)\npreds = LR.predict(X_train)\nprint(\"Accuracy (custom):\", accuracy_score(y_train, preds))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T09:48:20.788922Z","iopub.execute_input":"2025-09-24T09:48:20.789423Z","iopub.status.idle":"2025-09-24T09:54:22.297499Z","shell.execute_reply.started":"2025-09-24T09:48:20.789398Z","shell.execute_reply":"2025-09-24T09:54:22.296721Z"}},"outputs":[{"name":"stdout","text":"Accuracy: (API) 0.9186507936507936\nAccuracy (custom): 0.9169727891156463\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"import joblib\njoblib.dump(model, \"logreg_sklearn.pkl\") # saving sklearn model\nnp.savez(\"logreg_custom.npz\", W=LR.W, b=LR.b) # saving w,b of custom model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T10:19:55.294285Z","iopub.execute_input":"2025-09-24T10:19:55.294590Z","iopub.status.idle":"2025-09-24T10:19:55.301116Z","shell.execute_reply.started":"2025-09-24T10:19:55.294548Z","shell.execute_reply":"2025-09-24T10:19:55.300398Z"}},"outputs":[],"execution_count":50},{"cell_type":"markdown","source":"## Naive Bayes Model","metadata":{}},{"cell_type":"code","source":"class My_NB:\n    def __init__(self , eps=1e-6):\n        self.priors = None\n        self.mean = None\n        self.variances = None\n        self.eps = eps\n    \n    def train(self , X , y):\n        N, D = X.shape\n        classes = np.unique(y)\n        K = len(classes)\n        self.priors = np.zeros(K)\n        self.means = np.zeros((K, D))\n        self.variances = np.zeros((K, D))\n        \n        for idx, k in enumerate(classes):\n            X_k = X[y == k]\n            N_k = X_k.shape[0]\n            self.priors[idx] = N_k / N\n            self.means[idx , :] = np.mean(X_k , axis = 0)\n            self.variances[idx , :] = np.var(X_k , axis = 0) + self.eps\n        self.classes = classes\n        return self.priors , self.mean , self.variances\n\n    def predict(self , X_test):\n        N, D = X_test.shape\n        K = self.priors.shape[0]\n        scores = np.zeros((N , K))\n\n        for k in range(K):\n            prior = np.log(self.priors[k])\n            mu = self.means[k]\n            sigma2 = self.variances[k]\n            log_likelihood = -0.5 * np.sum(np.log(2 * np.pi * sigma2) + ((X_test - mu) ** 2) / (2 * sigma2) , axis=1)\n            scores[:, k] = prior + log_likelihood\n        return self.classes[np.argmax(scores , axis = 1)]\n\n    def evaluate(self , X_test , y_test):\n        y_pred = self.predict(X_test)\n        accuracy = np.sum(y_pred == y_test)\n        return accuracy\n\n    def load_model(self, filepath):\n        data = np.load(filepath, allow_pickle=True)\n        self.priors = data[\"priors\"]\n        self.means = data[\"means\"]\n        self.variances = data[\"variances\"]\n        self.classes = data[\"classes\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T13:02:37.272710Z","iopub.execute_input":"2025-09-24T13:02:37.273132Z","iopub.status.idle":"2025-09-24T13:02:37.283396Z","shell.execute_reply.started":"2025-09-24T13:02:37.273105Z","shell.execute_reply":"2025-09-24T13:02:37.282357Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\nprint(\"Accuracy: (API)\", accuracy_score(y_test, preds))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T13:02:39.318926Z","iopub.execute_input":"2025-09-24T13:02:39.319261Z","iopub.status.idle":"2025-09-24T13:02:39.427471Z","shell.execute_reply.started":"2025-09-24T13:02:39.319238Z","shell.execute_reply":"2025-09-24T13:02:39.426416Z"}},"outputs":[{"name":"stdout","text":"Accuracy: (API) 0.8256349206349206\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"nb = My_NB(1e-2)\nnb.train(X_train , y_train)\npreds = nb.predict(X_test)\nprint(\"Accuracy: (Custom)\", accuracy_score(y_test, preds))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T13:04:52.358275Z","iopub.execute_input":"2025-09-24T13:04:52.358583Z","iopub.status.idle":"2025-09-24T13:04:53.591027Z","shell.execute_reply.started":"2025-09-24T13:04:52.358560Z","shell.execute_reply":"2025-09-24T13:04:53.590057Z"}},"outputs":[{"name":"stdout","text":"Accuracy: (Custom) 0.7165079365079365\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"import joblib\njoblib.dump(model, \"naive_bayes_sklearn.pkl\") # saving sklearn model\nnp.savez(\"naive_bayes_custom\",\n        priors=nb.priors,\n        means=nb.means,\n        variances=nb.variances,\n        classes=nb.classes) # saving params of custom model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T13:08:33.434836Z","iopub.execute_input":"2025-09-24T13:08:33.435192Z","iopub.status.idle":"2025-09-24T13:08:33.443139Z","shell.execute_reply.started":"2025-09-24T13:08:33.435145Z","shell.execute_reply":"2025-09-24T13:08:33.442337Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"class My_SVM():\n    def __init__(self, X, y, C=1, kernel='linear', b=0, max_iter=300, tol=1e-5, eps=1e-8):\n        self.X = X\n        self.y = y\n        self.m, self.n = np.shape(self.X)\n        self.C = C\n        self.error = np.zeros(self.m)\n        self.max_iter=max_iter\n        self.tol = tol\n        self.eps = eps\n\n        self.alphas = np.zeros(self.m)\n        self.b = b\n\n        if (kernel == 'linear'):\n            self.kernel_func = self.linear_kernel\n        elif kernel == 'gaussian' or kernel == 'rbf':\n            self.kernel_func = self.gaussian_kernel\n        else:\n            raise ValueError('unknown kernel type'\n\n        self.w = np.zeros(self.n)  # to be used by linear kernel\n\n    def linear_kernel(self , x1 , x2 , b=0):\n        return x1 @ x2.T + b\n\n    def gaussian_kernel(self , x1 , x2 , sigma=1):\n        if np.ndim(x1) == 1 and np.ndim(x2) == 1:\n            return np.exp(-(np.linalg.norm(x1-x2) , 2) ** 2 / (2 * sigma ** 2))\n        elif(np.ndim(x1)>1 and np.ndim(x2) == 1) or (np.ndim(x1) == 1 and np.ndim(x2)>1):\n            return np.exp(-(np.linalg.norm(x1-x2, 2, axis=1)**2)/(2*sigma**2))\n        else:\n            diff = x1[: newaxis] - x2[newaxis :] # N,D -> N,1,D || M,D -> 1,M,D || x2-x1=N,M,D\n            return np.exp(-(np.linalg.norm(diff , 2 , axis = 2)**2) / (2 * simga ** 2))\n            \n    def predict(self, x):\n        result = (self.alphas * self.y) @ self.kernel_func(self.X, x) + self.b\n        return result\n\n    def get_error(self, i):\n        return self.predict(self.X[i,:]) - self.y[i]\n\n    def take_step(self , i1 , i2):\n        if(i1 == i2):\n            return 0\n        x1 = self.X[i1 :]\n        x2 = self.X[i2 :]\n        y1 = self.y[i1]\n        y2 = self.y[i2]\n        alpha1 = self.alphas[i1]\n        alpha2 = self.alphas[i2]\n        b = self.b\n        E1 = self.get_error(i1)\n        E2 = self.get_error(i2)\n        s = y1 * y2 # sign factor\n\n        if(y1 != y2):\n            L = max(0 , alpha2 - alpha1)\n            H = min(self.C , self.C + alpha2 - alpha1)\n        else:\n            L = max(0, alpha2 + alpha1 - self.C)\n            H = min(self.C, alpha2 + alpha1)\n            \n        if(L == H):\n            return 0 # no room for update\n            \n        k11 = self.kernel_func(x1, x1)\n        k12 = self.kernel_func(x1, x2)\n        k22 = self.kernel_func(x2, x2)\n        eta = k11 + k22 - 2 * k12\n\n        if eta>0: # invalid case\n            alpha2_new = alpha2 + y2 * (E2 - E1) / eta\n            if alpha2_new >= H:\n                alpha2_new = H\n            elif alpha2_new <= L:\n                alpha2_new = L \n        else:\n            return 0\n        if abs(alpha2_new - alpha2) < self.eps * (alpha2 + alpha2_new + self.eps):\n        return 0\n\n        alpha1_new = alpha1 + s * (alpha2 - alpha2_new) # $\\alpha_{i1} y_{i1} + \\alpha_{i2} y_{i2} = \\text{constant}$.\n        if alpha1_new < self.eps:\n            alpha1_new = 0\n        elif alpha1_new > (self.C - self.eps):\n            alpha1_new = self.C\n\n        b1 = b - E1 - y1 * (alpha1_new - alpha1) * K11 - y2(alpha2_new - alpha2)*K12\n        b2 = b - E2 - y1 * (alpha1_new - alpha1) * K12 - y2(alpha2_new - alpha2)*K22\n        if 0 < alpha1_new < self.C:\n            self.b = b1\n        elif 0 < alpha2_new < self.C:\n            self.b = b2\n        else:\n            self.b = 0.5 * (b1 + b2)\n\n        if ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-25T00:35:37.964721Z","iopub.execute_input":"2025-09-25T00:35:37.964996Z","iopub.status.idle":"2025-09-25T00:35:37.976246Z","shell.execute_reply.started":"2025-09-25T00:35:37.964975Z","shell.execute_reply":"2025-09-25T00:35:37.974359Z"}},"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_36/2393471869.py\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    def __init__():\u001b[0m\n\u001b[0m                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m incomplete input\n"],"ename":"SyntaxError","evalue":"incomplete input (2393471869.py, line 2)","output_type":"error"}],"execution_count":1},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}