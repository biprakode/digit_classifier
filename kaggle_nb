{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-24T06:11:06.201660Z","iopub.execute_input":"2025-09-24T06:11:06.201902Z","iopub.status.idle":"2025-09-24T06:11:08.195213Z","shell.execute_reply.started":"2025-09-24T06:11:06.201878Z","shell.execute_reply":"2025-09-24T06:11:08.194518Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/mnist-digit-recognizer/train.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"## Basic EDA","metadata":{}},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/mnist-digit-recognizer/train.csv\")\ndata.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T07:00:46.363754Z","iopub.execute_input":"2025-09-24T07:00:46.364004Z","iopub.status.idle":"2025-09-24T07:00:48.126663Z","shell.execute_reply.started":"2025-09-24T07:00:46.363986Z","shell.execute_reply":"2025-09-24T07:00:48.126057Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(42000, 785)"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"import seaborn as sns\n\n# plotting distribution of images\nsns.countplot(x=\"label\" , data = data , palette='viridis')\nplt.title(\"Distribution of Digits in MNIST\")\nplt.xlabel(\"Digit Label\")\nplt.ylabel(\"Count\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T07:04:07.761510Z","iopub.execute_input":"2025-09-24T07:04:07.761806Z","iopub.status.idle":"2025-09-24T07:04:08.750111Z","shell.execute_reply.started":"2025-09-24T07:04:07.761786Z","shell.execute_reply":"2025-09-24T07:04:08.749348Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAkQAAAHHCAYAAABeLEexAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA7RUlEQVR4nO3deVgW9f7/8dcNyuICuCSIIqB2FHPXVLSTG4qGlGVlZYZbnfxhhZaVWYp6TLNck7SsoGNyXPqm5S6KSyYWkpT7yU6lXxU4pYK4gML8/jgX99dbXACRQef5uK65Lu/PfGbm/bkBeTHzmblthmEYAgAAsDAnswsAAAAwG4EIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIKEXR0dGy2WxlcqwuXbqoS5cu9tdbtmyRzWbTF198USbHHzRokAICAsrkWCWVnZ2tYcOGycfHRzabTVFRUaW6f5vNpujo6BJtGxAQoEGDBpVqPVe68nsEwLURiIBriIuLk81msy9ubm7y9fVVaGio5syZozNnzpTKcY4fP67o6GilpqaWyv5KU3murSjefvttxcXFafjw4Vq4cKEGDhx4zb4BAQH2r7WTk5O8vLzUrFkzPffcc/ruu+9uea379+9XdHS0fvvtt1t+rJK6/Gdi+/bthdYbhiE/Pz/ZbDb16dPHYV3BdtOnT7/mfnft2mVvK/jj4o8//nDou3LlSnXu3Fm1atVSpUqVVL9+fT3++ONat26dpP+GwMt/bq+1lDTI4s5VwewCgPJu4sSJCgwM1MWLF5WWlqYtW7YoKipKM2bM0Ndff63mzZvb+7755pt6/fXXi7X/48ePa8KECQoICFDLli2LvN2GDRuKdZySuF5tCxYsUH5+/i2v4WYkJiaqQ4cOGj9+fJH6t2zZUi+//LIk6cyZMzpw4ICWLVumBQsWaOTIkZoxY4ZD//Pnz6tChZL9N3ro0CE5Of3f36T79+/XhAkT1KVLl1I783arvkfc3NwUHx+v++67z6F969at+t///V+5urpec9t3331Xw4cPV6VKlYp93Pfee0+jR49W586dNWbMGFWqVEmHDx/Wxo0btXjxYvXq1Utjx47VsGHD7NskJydrzpw5euONNxQUFGRvv/znFpAIRMAN9e7dW23btrW/HjNmjBITE9WnTx89+OCDOnDggNzd3SVJFSpUKPEvyKI6d+6cKlWqJBcXl1t6nBupWLGiqccvioyMDDVp0qTI/evUqaOnn37aoe2dd97RU089pZkzZ+ruu+/W8OHD7evc3NxKXNv1QkNpuVXfIw888ICWLVumOXPmOHy/x8fHq02bNoXO6hRo2bKlUlNTNX/+fI0aNapYx7x06ZImTZqkHj16XDXoZWRkSJJ69Ojh0O7m5qY5c+aoR48eXD7EdXHJDCiBbt266a233tLvv/+uzz//3N5+tTlECQkJuu++++Tl5aUqVaqoUaNGeuONNyT9d97PvffeK0kaPHiw/XR+XFycpP+e/m/atKlSUlJ0//33q1KlSvZtrzU/JC8vT2+88YZ8fHxUuXJlPfjggzp69KhDn2vNX7l8nzeq7WpziM6ePauXX35Zfn5+cnV1VaNGjfTee+/JMAyHfjabTSNGjNCKFSvUtGlTubq66p577rFf9riRjIwMDR06VN7e3nJzc1OLFi302Wef2dcXzKf69ddftXr1anvtJbkc5e7uroULF6p69eqaPHmyw1iudully5Ytatu2rdzc3NSgQQN9+OGHV/2+uPxrEBcXp8cee0yS1LVrV3u9W7ZskSTt2rVLoaGhqlmzptzd3RUYGKghQ4bcsPZrzTNbunSpJk+erLp168rNzU3du3fX4cOHi/yePPnkk/rzzz+VkJBgb8vNzdUXX3yhp5566prbderUSd26ddO0adN0/vz5Ih9Pkv744w9lZWWpU6dOV11fq1atYu0PuBKBCCihgvko17sssW/fPvXp00c5OTmaOHGipk+frgcffFDffvutJCkoKEgTJ06UJD333HNauHChFi5cqPvvv9++jz///FO9e/dWy5YtNWvWLHXt2vW6dU2ePFmrV6/Wa6+9phdffFEJCQkKCQkp9i+gotR2OcMw9OCDD2rmzJnq1auXZsyYoUaNGmn06NFXPRuwfft2/b//9//0xBNPaNq0abpw4YL69eunP//887p1nT9/Xl26dNHChQs1YMAAvfvuu/L09NSgQYM0e/Zse+0LFy5UzZo11bJlS3vtd911V7HegwJVqlTRww8/rGPHjmn//v3X7Ld792716tVLf/75pyZMmKChQ4dq4sSJWrFixXX3f//99+vFF1+UJL3xxhv2eoOCgpSRkaGePXvqt99+0+uvv673339fAwYM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hQraunWr5syZowoVKsjb21u5ubk6ffq0w3bp6eny8fGRJPn4+BS666zg9Y36eHh4XPXskCS5urrKw8PDYQEAAHcu0wJR9+7dtWfPHqWmptqXtm3basCAAfZ/V6xYUZs2bbJvc+jQIR05ckTBwcGSpODgYO3Zs0cZGRn2PgkJCfLw8FCTJk3sfS7fR0Gfgn0AAACYNoeoatWqatq0qUNb5cqVVaNGDXv70KFDNWrUKFWvXl0eHh564YUXFBwcrA4dOkiSevbsqSZNmmjgwIGaNm2a0tLS9OabbyoyMlKurq6SpOeff15z587Vq6++qiFDhigxMVFLly7V6tWry3bAAACg3CrXT6qeOXOmnJyc1K9fP+Xk5Cg0NFQffPCBfb2zs7NWrVql4cOHKzg4WJUrV1ZERIQmTvy/p+QGBgZq9erVGjlypGbPnq26devq448/VmhoqBlDAgAA5VC5CkRbtmxxeO3m5qaYmBjFxMRccxt/f3+tWbPmuvvt0qWLdu/eXRolAgCAO5DpzyECAAAwG4EIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYXrl6UjUAlBct3htvdgnX9eMrE8wuAbijcIYIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYHoEIAABYnqmBaN68eWrevLk8PDzk4eGh4OBgrV271r7+woULioyMVI0aNVSlShX169dP6enpDvs4cuSIwsLCVKlSJdWqVUujR4/WpUuXHPps2bJFrVu3lqurqxo2bKi4uLiyGB4AALhNmBqI6tat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UbNLAgAAt5Cpc4gKjBgxQqtWrdK2bdtUt25de7uPj49yc3N1+vRph7NE6enp8vHxsff5/vvvHfZXcBfa5X2uvDMtPT1dHh4ecnd3L1SPq6urXF1dS2VsAACg/DP1DJFhGBoxYoSWL1+uxMREBQYGOqxv06aNKlasqE2bNtnbDh06pCNHjig4OFiSFBwcrD179igjI8PeJyEhQR4eHmrSpIm9z+X7KOhTsA8AAGBtpp4hioyMVHx8vL766itVrVrVPufH09NT7u7u8vT01NChQzVq1ChVr15dHh4eeuGFFxQcHKwOHTpIknr27KkmTZpo4MCBmjZtmtLS0vTmm28qMjLSfpbn+eef19y5c/Xqq69qyJAhSkxM1NKlS7V69WrTxg4AAMoPU88QzZs3T5mZmerSpYtq165tX5YsWWLvM3PmTPXp00f9+vXT/fffLx8fH3355Zf29c7Ozlq1apWcnZ0VHBysp59+Ws8884wmTpxo7xMYGKjVq1crISFBLVq00PTp0/Xxxx9zyz0AAJBk8hkiwzBu2MfNzU0xMTGKiYm5Zh9/f3+tWbPmuvvp0qWLdu/eXewaAQDAna/c3GUGAABgFgIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPAIRAACwPFMD0bZt2xQeHi5fX1/ZbDatWLHCYb1hGBo3bpxq164td3d3hYSE6Oeff3boc/LkSQ0YMEAeHh7y8vLS0KFDlZ2d7dDnp59+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i4+Pl81m04IFC+Tm5qYmTZro2LFjevbZZ6/a38XFRZ6enrLZbPLx8bmpuvr16+fw+tNPP9Vdd92l/fv3q2nTpvb2ESNG2PvOmzdP69at0yeffKJXX31Vc+fOVatWrfT222877MfPz0//+te/9Je//OWmagRQcpwhAlCuGIZxzfk/hw4dUvPmzeXm5mZva9euXZnU9fPPP+vJJ59U/fr15eHhoYCAAEnSkSNHHPoFBwfb/12hQgW1bdtWBw4ckCT9+OOP2rx5s6pUqWJfGjduLElXvfwGoOxwhghAuXLgwAEFBgaaXUYh4eHh8vf314IFC+Tr66v8/Hw1bdpUubm5Rd5Hdna2wsPD9c477xRaV7t27dIsF0AxcYYIQLmRmJioPXv2FLo8VaBRo0bas2ePcnJy7G3JycnX3aeLi4vy8vJuqq4///xThw4d0ptvvqnu3bsrKChIp06dumrfnTt32v996dIlpaSkKCgoSJLUunVr7du3TwEBAWrYsKHDUrly5ZuqEcDNIRABMEVOTo7S0tJ07Ngx/fDDD3r77bf10EMPqU+fPnrmmWeuus1TTz2l/Px8Pffcczpw4IDWr1+v9957T5KueZktICBA2dnZ2rRpk/744w+dO3fumjXl5eUpNTXVYTlw4ICqVaumGjVq6KOPPtLhw4eVmJioUaNGXXUfMTExWr58uQ4ePKjIyEidOnVKQ4YMkSRFRkbq5MmTevLJJ5WcnKxffvlF69ev1+DBg286tAG4OQQiAKZYt26dateurYCAAPXq1UubN2/WnDlz9NVXX8nZ2fmq23h4eGjlypVKTU1Vy5YtNXbsWI0bN06SHOYVXa5jx456/vnn1b9/f911112aNm3aNWvKzs5Wq1atHJbw8HA5OTlp8eLFSklJUdOmTTVy5Ei9++67V93H1KlTNXXqVLVo0ULbt2/X119/rZo1a0qSfH199e233yovL089e/ZUs2bNFBUVJS8vLzk58d8xYCabYRiG2UUAQEktWrTI/qwhd3d3s8sBcJtiUjWA28o//vEP1a9fX3Xq1NGPP/6o1157TY8//jhhCMBNIRABuK2kpaVp3LhxSktLU+3atfXYY49p8uTJZpcF4DbHJTMAAGB5zOIDAACWRyACAACWRyACAACWRyACAACWRyACAACWRyACAACWRyACAACWRyACAACWRyACAACW9/8Ba7987LNiM9UAAAAASUVORK5CYII=\n"},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"### imagifying data for CNN models","metadata":{}},{"cell_type":"code","source":"from PIL import Image\nimport matplotlib.pyplot as plt\nimport random\nimages = {}\n\ndef imagify_row(row):\n    label = row['label']\n    row = row.drop(['label'])\n    img = Image.fromarray(row.values.reshape(28,28).astype(np.uint8))\n    images.setdefault(label, []).append(img)\n    \n#imagifying rows\ndata.apply(imagify_row , axis = 1)\n\n#picking random image\nlabel = random.choice(list(images.keys()))\nim = random.choice(images[label])\nplt.imshow(im , cmap = \"gray\")\nplt.title(f\"Label: {label}\")\nplt.axis(\"off\")\nplt.show()\n\n#storing images under subfolders\nos.makedirs('images' , exist_ok = True)\nfor label in images.keys():\n    os.makedirs(f\"images/{label}\" , exist_ok = True)\n    for idx, img in enumerate(images[label]):\n        img.save(f\"images/{label}/{label}_{idx}.png\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T07:00:37.526508Z","iopub.status.idle":"2025-09-24T07:00:37.526854Z","shell.execute_reply.started":"2025-09-24T07:00:37.526698Z","shell.execute_reply":"2025-09-24T07:00:37.526715Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Multinomial Logistic Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX = data.drop('label' , axis=1).values / 255.0\ny = data['label'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T08:50:51.835948Z","iopub.execute_input":"2025-09-24T08:50:51.836231Z","iopub.status.idle":"2025-09-24T08:50:52.401532Z","shell.execute_reply.started":"2025-09-24T08:50:51.836211Z","shell.execute_reply":"2025-09-24T08:50:52.400956Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"class My_LR:\n    def __init__(self , lr=0.01 , n_iters=10000):\n        self.lr = lr\n        self.n_iters = n_iters\n\n    def softmax(self , z):\n        exp_z = np.exp(z - np.max(z , axis = 1 , keepdims = True))\n        return exp_z / np.sum(exp_z , axis = 1 , keepdims = True)\n\n    def fit(self , X , y):\n        n_samples , n_features = X.shape\n        n_classes = len(np.unique(y))\n\n        self.W = np.zeros((n_features , n_classes))\n        self.b = np.zeros((1 , n_classes))\n\n        #OHE y\n        y_ohe = np.eye(n_classes)[y].squeeze()\n\n        #meat\n        for _ in range(self.n_iters):\n            linear = np.dot(X, self.W) + self.b\n            y_pred = self.softmax(linear)\n\n            dW = (1 / n_samples) * np.dot(X.T, (y_pred - y_ohe))\n            db = (1 / n_samples) * np.sum(y_pred - y_ohe, axis=0, keepdims=True)\n\n            self.W -= self.lr * dW\n            self.b -= self.lr * db\n\n    def predict(self , X):\n        linear = np.dot(X, self.W) + self.b\n        y_pred = self.softmax(linear)\n        return np.argmax(y_pred , axis = 1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T08:50:55.434750Z","iopub.execute_input":"2025-09-24T08:50:55.435011Z","iopub.status.idle":"2025-09-24T08:50:55.446955Z","shell.execute_reply.started":"2025-09-24T08:50:55.434990Z","shell.execute_reply":"2025-09-24T08:50:55.446160Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nmodel = LogisticRegression(max_iter=2000, multi_class=\"multinomial\" , solver='sag')\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\nprint(\"Accuracy: (API)\", accuracy_score(y_test, preds))\n\n## Turn of my model\nLR = My_LR(0.1 , 2000)\nLR.fit(X_train , y_train)\npreds = LR.predict(X_train)\nprint(\"Accuracy (custom):\", accuracy_score(y_train, preds))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T09:48:20.788922Z","iopub.execute_input":"2025-09-24T09:48:20.789423Z","iopub.status.idle":"2025-09-24T09:54:22.297499Z","shell.execute_reply.started":"2025-09-24T09:48:20.789398Z","shell.execute_reply":"2025-09-24T09:54:22.296721Z"}},"outputs":[{"name":"stdout","text":"Accuracy: (API) 0.9186507936507936\nAccuracy (custom): 0.9169727891156463\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"import joblib\njoblib.dump(model, \"logreg_sklearn.pkl\") # saving sklearn model\nnp.savez(\"logreg_custom.npz\", W=LR.W, b=LR.b) # saving w,b of custom model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T10:19:55.294285Z","iopub.execute_input":"2025-09-24T10:19:55.294590Z","iopub.status.idle":"2025-09-24T10:19:55.301116Z","shell.execute_reply.started":"2025-09-24T10:19:55.294548Z","shell.execute_reply":"2025-09-24T10:19:55.300398Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"class My_NB:\n    def fit(X , y , eps=1e-6):\n        N , D = X.shape\n        K = len(np.unique(y))\n\n        priors = np.zeros(K)\n        mean = np.zeros(K , D)\n        variances = np.zeros(K , D)\n\n        for k in range(K):\n            X_k = ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}